const http = require("http")
const fs = require("fs")
const url = require("url")
const db = require("./db.json")
const dotenv =require("dotenv").config()



const bookController = require("./controllers/bookController")

const server = http.createServer((req, res) => {
    if (req.method === "GET" && req.url === "/api/users") {
        fs.readFile('db.json', (err, db) => {
            if (err) {
                throw err
            }
            const data = JSON.parse(db)
            res.writeHead(200,{ "content-type":"application/json" })
            res.write(JSON.stringify(data.users))
            res.end()
        })
    }
    else if (req.method === "GET" && req.url === "/api/books") {
        bookController.getAll(req,res)
    }
    else if (req.method === "DELETE" && req.url.startsWith("/api/books")) {
        bookController.removeOne(req,res)
    }
    else if (req.method === "POST" && req.url === "/api/books") {
        let book = "";

        req.on('data', (datas) => {
            book = book + JSON.stringify(datas)
        })
        req.on('end', () => {
            console.log(JSON.parse(book))
            const newBook = { id:crypto.randomUUID(),...JSON.parse(book),free:1 }

            db.books.push(newBook)

            fs.writeFile('db.json',JSON.stringify(db), (err) => {
                if (err) {
                    throw err
                }

                res.writeHead(201,{"content-type":"application/json"})
                res.write(JSON.stringify({message:"new books added"}))
                res.end()
            })
        })
    }
    else if (req.method === "PUT" && req.url.startsWith("/api/books")) {
        const parseurl = url.parse(req.url, true);
        const bookID = parseurl.query.id;

        let bookNewInfo = "";

        req.on('data', (datas) => {
            bookNewInfo = bookNewInfo + JSON.parse(datas)
        })

        req.on('end', () => {
            const reqBody = JSON.parse(bookNewInfo)

            db.books.forEach(book => {
                if (book.id === Number(bookID)) {
                    book.title = reqBody.title
                    book.author = reqBody.author
                    book.price = reqBody.price
                }
            })
            fs.writeFile("./db.json", JSON.stringify(db),(err) => {
                if (err) {
                    throw err
                }

                res.writeHead(200,{"content-type":"application/json"})
                res.write(JSON.stringify({message: 'new book added'}))
                res.end()
            })
        })
    }
    else if (req.method === "POST" && req.url === "/api/users") {
        let user = ""

        req.on("data",(data) => {
            user = user + JSON.stringify(data)
        })

        req.on("end",() => {
            const {name, username} = JSON.parse(user)
            const userExist = db.users.find(
                (user) => {user.username === username}
            )
            if (name === '' || username === '') {
                res.writeHead(422,{"content-type":"application/json"})
                res.write(JSON.stringify({message:"user data not valid"}))
                res.end()
            }
            else if (userExist) {
                res.writeHead(409,{"content-type":"application/json"})
                res.write(JSON.stringify({message:"already loged in"}))
                res.end()
            }
            else {
                const newuser = {
                    id:crypto.randomUUID(),
                    name,
                    username,
                    charge:0
                }
                db.users.push(newuser)

                fs.writeFile("db.json",JSON.stringify(db),(err) => {
                    if (err) {
                        throw err
                    }
                })
    
                res.writeHead(201,{"content-type":"application/json"})
                res.write(JSON.stringify({message:"new user added"}))
                res.end()

            }


        })
    }
    else if (req.method === "PUT" && req.url.startsWith === "/api/users") {
        const parseUrl = JSON.parse(req.url, true)
        const userID = parseUrl.query.id

        let newUserInfo = "";

        req.on('data', (datas) => {
            newUserInfo = newUserInfo + JSON.parse(datas)
        })

        req.on('end', () => {
            const reqBody = JSON.parse(newUserInfo)

            db.users.forEach(user => {
                if (user.id === (userID)) {
                    user.name = reqBody.name
                    user.username = reqBody.username
                    user.charge = reqBody.charge
                    user.role = reqBody.role
                }
            })
            fs.writeFile("./db.json", JSON.stringify(db),(err) => {
                if (err) {
                    throw err
                }

                res.writeHead(200,{"content-type":"application/json"})
                res.write(JSON.stringify({message: 'new user update'}))
                res.end()
            })
        })
    }
    else if (req.method === "POST" && req.url === "/api/users/login") {
        let user = ''

        req.on("data", (data) => {
            user = user + data.toString()
        })

        req.on("end",() => {
            const reqBody = JSON.parse(user)

            const mainUser = db.users.find(user => user.username === reqBody.username)

            if (mainUser) {
                res.writeHead(200,{"content-type":"application/json"})
                res.write(JSON.stringify({username:mainUser.username}))
                res.end()
            }
            else {
                res.writeHead(401,{"content-type":"application/json"})
                res.write(JSON.stringify({message: 'user not found'}))
                res.end()
            }
        })
    }
    else if (req.method === "POST" && req.url === "/api/book/rent") {
        let clinetInfo = ""

        req.on("data", (data) => {
            clinetInfo = clinetInfo + data.toString()
        })

        req.on("end", () => {
            let {userID,bookID} = JSON.parse(clinetInfo)

            const isFreeBook = db.books.some(
                (book) => book.id === Number(bookID) && book.free === 1
            )

            if (isFreeBook) {
                db.books.forEach((book) => {
                    if (book.id === Number(bookID)) {
                        book.free = 0
                    }
                })


                const newRent = {
                    id:crypto.randomUUID(),
                    userID,
                    bookID
                    
                }
                db.rents.push(newRent)

                fs.writeFile('./db.json',JSON.stringify(db), (err) => {
                    if (err) {
                        throw err
                    }
                    res.writeHead(201,{"content-type":"application/json"})
                    res.write(JSON.stringify({message: 'rent successed'}))
                    res.end()
                })

            }
            else {
                res.writeHead(401,{"content-type":"application/json"})
                res.write(JSON.stringify({message: 'not found'}))
                res.end()
            }
        })
    }
    else if (req.method === "PUT" && req.url.startsWith("/api/books/return")) {
        const parseUrl = JSON.parse(req.url, true)
        const bookID = parseUrl.query.id

        db.books.forEach(book => {
            if (book.id === bookID) {
                book.free = 1
            }
            fs.writeFile("./db.json",JSON.stringify(db),(err) => {
                if (err) {
                    throw err
                }

                res.writeHead(200,{"content-type":"application/json"})
                res.write(JSON.stringify({message: 'returned succesfully'}))
                res.end()
            })
        })
    }
})

server.listen(process.env.PORT, () => {
    console.log(`server run on ${process.env.PORT}`)
})



const { MongoClient, ObjectId} = require("mongodb")
require('dotenv').config()


const clinet = new MongoClient(process.env.dbConnectionUrl)

const dbName = process.env.dbName

// const main = async () => {
//     // await clinet.connect()

//     // const db = clinet.db(dbName)

//     // const usersCollection = db.collection('users')
//     // usersCollection.insertOne({
//     //     "name":"matin",
//     //     "username":"matin.vilan",
//     //     "email":"matinvilan@gmail.com",
//     //     "charge":0,
//     //     "role":"USER"
//     // })

//     // const booksCollection =db.collection('books')
//     // booksCollection.insertOne({
//     //     "title":"bi shuri",
//     //     "author":"random",
//     //     "price":100000,
//     //     "free":0
//     // })
//     // const userCollection = db.collection("users")
//     // const noChargeUsers = await userCollection.find({role:"ADMIN"}).toArray()
//     // const mainUser = await userCollection.findOne({
//     //     _id: new ObjectId("673caa5c4f47f9a06177b057")
//     // })

//     // console.log(noChargeUsers)
// }

module.exports = {
    db : async () => {
        await clinet.connect()

        const db = clinet.db(dbName)
        return db
    }
}

main()